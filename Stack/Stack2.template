/*
  FILE: Stack2.template
  TEMPLATE CLASS IMPLEMENTED: Stack<Item> (see Stack2.h for documentation)
  This file is included in the header file and not compiled serparately.
  INVARIANT for the Stack class:
    1. The items in the stack are stored in a linked list, with the top of the stack stored at the 
       head node, down to the bottom of the stack at the final node.
    2. The member variable topPtr is the head pointer of the linked list.
*/

#include <cassert>    // Provides assert

#include "Node2.h"    // Node template class from Figure 0.4 on page 326

namespace main_savitch_7B {
  template <class Item>
  Stack<Item>::Stack(const Stack<Item>& source) {
    main_savitch_6B::Node<Item> *tailPtr;       // Needed for arguement of listCopy
    main_savitch_6B::listCopy(source.topPtr, topPtr, tailPtr);
  }

  template <class Item>
  void Stack<Item>::push(const Item& entry) {
    main_savitch_6B::listHeadInsert(topPtr, entry);
  }

  template <class Item>
  void Stack<Item>::pop() {
    assert(!empty());
    main_savitch_6B::listHeadRemove(topPtr);
  }

  template <class Item>
  void Stack<Item>::operator =(const Stack<Item>& source) {
    main_savitch_6B::Node<Item> *tailPtr;       // Needed for arguement of listCopy;

    if (this == &source) {    // Handle self-assignment
      return;
    }

    main_savitch_6B::listClear(topPtr);
    main_savitch_6B::listCopy(source.topPtr, topPtr, tailPtr);
  }

  template <class Item>
  Item Stack<Item>::top() const {
    assert(!empty());
    return topPtr->data();
  }
}