#include <algorithm>  // Provides find
#include <cassert>    // Provides assert
#include <cstdlib>    // Provides size_t
#include <iostream>   // Provides cout
#include <limits>     // Provides INFINITY
#include <queue>      // Provides queue
#include <set>        // Provides set
#include <vector>     // Provides vector

namespace main_savitch_15 {
template <class Item>
const std::size_t UndirectedWeightedGraph<Item>::MAXIMUM;

template <class Item>
void UndirectedWeightedGraph<Item>::addVertex(const Item& label) {
  // increment the vertex count
  // add the vertex
  adjacencyList[manyVertices++] = std::list<std::pair<Item, int>>();
  // add the new vertex to the labels vector
  labels.push_back(label);
}

template <class Item>
void UndirectedWeightedGraph<Item>::addEdge(const Item& source, const Item& target, int weight) {
  // make sure weight is a non negative number
  assert(weight > 0);
  auto sourceIterator = std::find(labels.begin(), labels.end(), source);
  auto targetIterator = std::find(labels.begin(), labels.end(), target);
  if (sourceIterator == labels.end()) return;
  if (targetIterator == labels.end()) return;
  int sourceIndex = std::distance(labels.begin(), sourceIterator);
  int targetIndex = std::distance(labels.begin(), targetIterator);
  // add target and wight to the source  list
  adjacencyList[sourceIndex].push_front({target, weight});
  // add source and the weight to the target list
  adjacencyList[targetIndex].push_front({source, weight});
}

template <class Item>
bool UndirectedWeightedGraph<Item>::isEdge(const Item& source, const Item& target) const {
  auto sourceIterator = std::find(labels.begin(), labels.end(), source);
  auto targetIterator = std::find(labels.begin(), labels.end(), target);
  // make sure the list contains the source
  assert(sourceIterator != labels.end());
  // amke sure the list contains the target
  assert(targetIterator != labels.end());
  // get the index for the source, in the list array
  int sourceIndex = std::distance(labels.begin(), sourceIterator);
  // get the inex for the target, in the list array
  int targetIndex = std::distance(labels.begin(), targetIterator);
  // iterator through the list and check if the target exists
  for (auto it = adjacencyList[sourceIndex].begin(); it != adjacencyList[sourceIndex].end(); it++) {
    if (target == it->first) return true;
  }
  return false;
}

template <class Item>
void UndirectedWeightedGraph<Item>::removeEdge(const Item& source, const Item& target) {
  auto sourceIterator = std::find(labels.begin(), labels.end(), source);
  auto targetIterator = std::find(labels.begin(), labels.end(), target);
  // make sure the list contains the source
  assert(sourceIterator != labels.end());
  // make sure the list contains the target
  assert(targetIterator != labels.end());
  // get the index for the source, in the list array
  int sourceIndex = std::distance(labels.begin(), sourceIterator);
  // get the inex for the target, in the list array
  int targetIndex = std::distance(labels.begin(), targetIterator);
  // iterate through the source list and remove the target
  for (auto it = adjacencyList[sourceIndex].begin(); it != adjacencyList[sourceIndex].end(); it++) {
    if (target == it->first) {
      adjacencyList[sourceIndex].erase(it);
      break;
    }
  }
  // iterate through the target list and remove the source
  for (auto it = adjacencyList[targetIndex].begin(); it != adjacencyList[targetIndex].end(); it++) {
    if (source == it->first) {
      adjacencyList[targetIndex].erase(it);
      break;
    }
  }
}

template <class Item>
std::set<std::pair<Item, int>> UndirectedWeightedGraph<Item>::neighbors(const Item& vertex) const {
  std::set<std::pair<Item, int>> neighbors;
  auto vertexIterator = std::find(labels.begin(), labels.end(), vertex);
  assert(vertexIterator != labels.end());
  std::size_t vertexIndex = std::distance(labels.begin(), vertexIterator);
  for (auto it = adjacencyList[vertexIndex].begin(); it != adjacencyList[vertexIndex].end(); it++) {
    neighbors.insert({it->first, it->second});
  }
  return neighbors;  // returning Item and weight
}

// Graph Traversal Algorithms
template <class Item>
void UndirectedWeightedGraph<Item>::recDfs(const Item& source, bool visited[]) {
  std::set<std::pair<Item, int>> neighbors = this->neighbors(source);
  auto sourceIterator = std::find(this->labels.begin(), this->labels.end(), source);
  auto sourceIndex = std::distance(this->labels.begin(), sourceIterator);

  visited[sourceIndex] = true;
  std::cout << this->labels[sourceIndex] << " ";
  // Traverse all the neighbors, looking for unvisisted vertices:
  for (auto it = neighbors.begin(); it != neighbors.end(); ++it) {
    auto neighborInterator = std::find(this->labels.begin(), this->labels.end(), it->first);
    auto neighborIndex = std::distance(this->labels.begin(), neighborInterator);
    if (!visited[neighborIndex])
      this->recDfs(it->first, visited);
  }
}

template <class Item>
void UndirectedWeightedGraph<Item>::dfs(const Item& source) {
  auto sourceIterator = std::find(this->labels.begin(), this->labels.end(), source);
  assert(sourceIterator != this->labels.end());
  bool visited[this->size()];
  std::fill_n(visited, this->size(), false);
  this->recDfs(source, visited);
}

template <class Item>
void UndirectedWeightedGraph<Item>::bfs(const Item& source) {
  bool visited[this->MAXIMUM];
  std::set<std::pair<Item, int>> neigbors;
  std::queue<Item> vertexQueue;
  auto sourceIterator = std::find(labels.begin(), labels.end(), source);

  assert(sourceIterator != this->labels.end());
  std::fill_n(visited, this->size(), false);
  std::size_t sourceIndex = std::distance(this->labels.begin(), sourceIterator);

  visited[sourceIndex] = true;
  std::cout << this->labels[sourceIndex] << " ";
  vertexQueue.push(labels[sourceIndex]);

  while (!vertexQueue.empty()) {
    neigbors = this->neighbors(vertexQueue.front());
    vertexQueue.pop();
    // Mark and process the unmarked neighbors, and place them in the queue.
    for (auto it = neigbors.begin(); it != neigbors.end(); ++it) {
      auto neighborIterator = std::find(this->labels.begin(), labels.end(), it->first);
      auto neighborIndex = std::distance(this->labels.begin(), neighborIterator);
      if (!visited[neighborIndex]) {
        visited[neighborIndex] = true;
        std::cout << this->labels[neighborIndex] << " ";
        vertexQueue.push(it->first);
      }
    }
  };
}

// modified version of geekforgeeks' dijkstra algorithm implementation
// https://www.geeksforgeeks.org/dijkstras-shortest-path-algorithm-using-set-in-stl/
template <class Item>
void UndirectedWeightedGraph<Item>::dijkstra(const Item& source) {
  auto sourceIterator = std::find(this->labels.begin(), this->labels.end(), source);
  // validate the source vertex
  assert(sourceIterator != this->labels.end());
  // set up infinity
  const int INF = std::numeric_limits<int>::max();
  std::size_t sourceIndex = std::distance(this->labels.begin(), sourceIterator);
  // set to contain distance from source(start) vertex and its index
  std::set<std::pair<int, int>> vertices;
  int dist[this->size()];
  // set every element in dist array to INF
  std::fill_n(dist, this->size(), INF);
  vertices.insert({0, sourceIndex});
  dist[sourceIndex] = 0;  // set the distance to 0 for the source
  // loop until the set is empty
  while (!vertices.empty()) {
    // holds the distance and index of vertices in the set
    std::pair<int, int> tmp = *(vertices.begin());
    vertices.erase(vertices.begin());
    int vertexIndex = tmp.second;
    // iterate through the neighbors
    for (auto it = adjacencyList[vertexIndex].begin(); it != adjacencyList[vertexIndex].end(); it++) {
      auto neighborIterator = std::find(this->labels.begin(), this->labels.end(), it->first);
      // locate the index of the neighbor in the labels array
      int neighborIndex = std::distance(this->labels.begin(), neighborIterator);
      int edgeWeight = it->second;
      if (dist[neighborIndex] > dist[vertexIndex] + edgeWeight) {
        if (dist[neighborIndex] != INF) {
          vertices.erase(vertices.find({dist[neighborIndex], neighborIndex}));
        }
        dist[neighborIndex] = dist[vertexIndex] + edgeWeight;  // update dist array
        vertices.insert({dist[neighborIndex], neighborIndex});
      }
    }
  }
  printf("Vertex   Distance from Source\n");
  for (auto it = this->labels.begin(); it != this->labels.end(); it++) {
    auto itr = std::find(this->labels.begin(), this->labels.end(), *it);
    auto vertexIndex = std::distance(this->labels.begin(), itr);
    printf("%c \t\t %d\n", this->labels[vertexIndex], dist[vertexIndex]);
  }
}

}  // namespace main_savitch_15