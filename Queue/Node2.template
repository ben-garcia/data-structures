/*
  FILE: Node2.template
  IMPLEMENTS: The function of the Node template class (see Node2.h for documentation)

  NOTE:
    Since node is a template calss, this file is included in Node2.h.
    Therefore, we should not put any using directives in this file.

  INVARIANT for the node class:
    The data of a node is stored in dataField, and the link in linkField.
*/

#include <cassert>  // Provides assert
#include <cstdlib>  // Provides NULL and size_t

namespace main_savitch_6B {
  template <class Item>
  void listClear(Node<Item>*& headPtr) {
    while (headPtr != NULL) {
      listHeadRemove(headPtr);
    }
  }

  template <class Item>
  void listCopy(const Node<Item>* sourcePtr, Node<Item>*& headPtr, Node<Item>*& tailPtr) {
    headPtr = NULL;
    tailPtr = NULL;

    // Handle the case of the empty list
    if (sourcePtr == NULL) {
      return;
    }

    // Make the head node for the newly creatd list, and put data in it
    listHeadInsert(headPtr, sourcePtr->data());
    tailPtr = headPtr;

    // Copy the rest of the nodes at a time, adding at the tail of new list.
    sourcePtr = sourcePtr->link();
    while (sourcePtr != NULL) {
      listInsert(tailPtr, sourcePtr->data());
      tailPtr = tailPtr->link();
      sourcePtr = sourcePtr->link();
    }
  }

  template <class Item>
  void listHeadInsert(Node<Item>*& headPtr, const Item& entry) {
    headPtr = new Node<Item>(entry, headPtr);
  }

  template <class Item>
  void listHeadRemove(Node<Item>*& headPtr) {
    Node<Item> *removePtr;

    removePtr = headPtr;
    headPtr = headPtr->link();
    delete removePtr;
  }

  template <class Item>
  void listInsert(Node<Item>* previousPtr, const Item& entry) {
    Node<Item> *insertPtr;

    insertPtr = new Node<Item>(entry, previousPtr->link());
    previousPtr->setLink(insertPtr);
  }

  template <class Item>
  std::size_t listLength(const Node<Item>* headPtr) {
    const Node<Item> *cursor;
    std::size_t answer;

    answer = 0;
    for (cursor = headPtr; cursor != NULL; cursor = cursor->link()) {
      answer++;
    }
    return answer;
  }

  template <class NodePtr, class SizeType>
  NodePtr listLocate(NodePtr headPtr, SizeType position) {
    NodePtr cursor;
    std::size_t i;

    assert(0 < position);
    cursor = headPtr;
    for (i = 1; (i < position) && (cursor != NULL); i++) {
      cursor = cursor->link();
    }
    return cursor;
  }

  template <class Item>
  void listRemove(Node<Item>* previousPtr) {
    Node<Item> *removePtr;

    removePtr = previousPtr->link();
    previousPtr->setLink(removePtr->link());
    delete removePtr;
  }

  template <class NodePtr, class Item>
  NodePtr listSearch(NodePtr headPtr, const Item& target) {
    NodePtr cursor;

    for (cursor = headPtr; cursor != NULL; cursor = cursor->link()) {
      if (target == cursor->data()) {
        return cursor;
      }
      return NULL;
    }
    
  }

}